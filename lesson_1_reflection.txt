How did viewing a diff between two versions of a file help you see the bug that
was introduced?



    by viewing a diff between two versions of a file, we can compare two file and see the difference of the two easily. so we can spot typo or re evaluate change.

How could having easy access to the entire history of a file make you a more 
efficient programmer in the long term?



    by having access to the entire history of a file, i can compare the newer version to the older version, and check wether the newer version are better. I can also change back the file to the older version if i prefer that.



What do you think are the pros and cons of manually choosing when to create a
 commit, like you do in Git, vs having versions automatically saved, like Google
docs does?



    choosing when to commit let user to flexibly commit when there are change that are meaningful, while automatically saved can sometimes save a meaningless change in the file, it can even save in the middle of writing code which can make the code uncompilable. But choosing when to commit manually can be affected by user error such as forgetting to save, and automatically saved can prevent such error.



Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?



    Because git are use for code, and one code file are sometimes related to another file, so it is more convenient to save multiple file in one commit. Meanwhile in google docs, one file usually not related to another file, so it is better to save treat each file separately.



How can you use the commands git log and git diff to view the history of files?



    git log command will list all the commit made in the project, and git diff will list the difference between two committed file (identified by commit ID).



How might using version control make you more confident to make changes that 
could break something?



    Because we can check each commit to find where something went wrong, so we can fix something that we break.

Now that you have your workspace set up, what do you want to try using Git for?


    I will try to use it for every project that i will do from now on.